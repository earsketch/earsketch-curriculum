# Mezcla Automática 2: Usar declaraciones condicionales para mezclar las pistas

# Configuarción
from earsketch import *
setTempo(120)

# Añadir una melodía y un bajo
melodia1 = YG_ALT_POP_GUITAR_3
melodia2 = YG_ALT_POP_GUITAR_1
bajo1 = YG_ALT_POP_BASS_1
bajo2 = DUBSTEP_SUBBASS_008
cuerdas = YG_HIP_HOP_STRINGS_4
fitMedia(melodia1, 1, 1, 9)
fitMedia(melodia2, 1, 9, 17)
fitMedia(bajo1, 2, 1, 9)
fitMedia(bajo2, 2, 9, 17)
fitMedia(cuerdas, 3, 9, 17)

# Añadir percusiones usando makeBeat()
ritmoBombo = "0---0-----0-0---"
ritmoRedoblante = "--0-0------000-"
sonidoBombo = OS_KICK02
sonidoRedoblante = OS_SNARE06
for compas in range(5, 17):
    makeBeat(ritmoBombo, 4, compas, ritmoBombo)
    makeBeat(sonidoRedoblante, 5, compas, ritmoRedoblante)

# Mezclar mis pistas
# Primero, analizamos el volumen de las pistas.
volumenPista1 = analyzeTrack(1, RMS_AMPLITUDE)
print("El volumen de la pista 1 es" + str(volumenPista1))
volumenPista2 = analyzeTrack(2, RMS_AMPLITUDE)
print("El volumen de la pista 2 es" + str(volumenPista2))
volumenPista3 = analyzeTrack(3, RMS_AMPLITUDE)
print("El volumen de la pista 3 es" + str(volumenPista3))

if volumenPista1 < volumenPista2:
    # Si la pista 1 tiene menos volumen que la pista 2, entonces se aumentará el volumen de la pista 1.
    setEffect(1, VOLUME, GAIN, +5)
    print("la pista 1 tuvo menos volumen que la pista 2")
elif volumenPista1 < volumenPista3:
    # Si la pista 1 tiene más volumen que la pista 2 pero menos volumen que la pista 3, se aumentará el volumen de la pista 1.
    setEffect(1, VOLUME, GAIN, +5)
    print("la pista 1 tuvo menos volumen que la pista 3")
else:
    # Si la pista 1 tiene más volumen que las pistas 2 y 3, entonces no se cambiará nada.
    print("la pista 1 ya tenía el volumen más alto")