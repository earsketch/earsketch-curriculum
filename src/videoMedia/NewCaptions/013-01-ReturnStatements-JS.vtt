WEBVTT00:00:00.819 --> 00:00:05.258[monophonic electronic tones]00:00:05.258 --> 00:00:08.668Hello and welcometo another EarSketch video.00:00:08.668 --> 00:00:11.940My name is Brandon, and I'ma member of the EarSketch team.00:00:11.940 --> 00:00:14.710Today we're going to coverReturn Statements.00:00:14.710 --> 00:00:18.370By the end of this video you'llknow what a return statement is,00:00:18.370 --> 00:00:21.500how to use it,and why it's useful.00:00:21.500 --> 00:00:23.380Before we getto return statements,00:00:23.380 --> 00:00:26.810let's quickly reviewthe purpose of a function.00:00:26.810 --> 00:00:29.890A function gives us a wayto code a specific task,00:00:29.890 --> 00:00:32.120a routine, if you will.00:00:32.120 --> 00:00:34.650The code within a functionis packaged up all neatly00:00:34.650 --> 00:00:38.090so we can use it without havingto worry about what's inside.00:00:38.090 --> 00:00:40.640We call this “abstraction.”00:00:40.640 --> 00:00:44.110The function can simplybe called to perform its task.00:00:44.110 --> 00:00:47.200Up until this point,our function calls have worked00:00:47.200 --> 00:00:51.780like this—We give our functionsome arguments, the input,00:00:51.780 --> 00:00:53.590and then the codewithin function body00:00:53.590 --> 00:00:56.130executes whatever it may be.00:00:56.130 --> 00:00:58.800All the action is happeningwithin the function,00:00:58.800 --> 00:01:02.710and all the information iscontained within the function.00:01:02.710 --> 00:01:06.180But functions also have theability to output information.00:01:06.180 --> 00:01:09.860And this is achievedby using a return statement.00:01:09.860 --> 00:01:12.340Return statements allow usto output information00:01:12.340 --> 00:01:13.930generated within a function00:01:13.930 --> 00:01:17.900so it can be used outside of thefunction later on in our script.00:01:17.900 --> 00:01:19.930For example,if we have a function00:01:19.930 --> 00:01:21.200that generates a number,00:01:21.200 --> 00:01:25.670like maybe a measure number,we can output it or return it00:01:25.670 --> 00:01:29.100so we can use it in anothercalculation or expression.00:01:29.100 --> 00:01:30.430The information is no longer00:01:30.430 --> 00:01:33.300just containedwithin the function body.00:01:33.300 --> 00:01:35.250Let's walk through an examplein EarSketch00:01:35.250 --> 00:01:39.760to look at how returnstatements work in more detail.00:01:39.760 --> 00:01:43.260OK. I'm going to go aheadand create a new script.00:01:44.360 --> 00:01:47.780And we’re provided withthe standard starting items.00:01:47.780 --> 00:01:51.560I’m going to slow downmy tempo just a bit.00:01:51.560 --> 00:01:54.670For this example, we're goingto be using makeBeat.00:01:54.670 --> 00:01:56.620So I'm going to definetwo beatStrings00:01:56.620 --> 00:02:02.570that I came up with earlier.All right.00:02:02.570 --> 00:02:06.820Now I'm going to define a customfunction called “createBeat.”00:02:06.820 --> 00:02:09.080We're going to use this functionwith the return statement00:02:09.080 --> 00:02:13.480in order to chain twobeats together, back to back.00:02:13.480 --> 00:02:17.960Its parameters are going to bethe measure we want to start at,00:02:17.960 --> 00:02:23.540the sound clip we want to useand, of course, the beatString.00:02:23.540 --> 00:02:25.570In the body,I'm going to define a variable00:02:25.570 --> 00:02:28.500that sets the ending measureof our beat.00:02:28.500 --> 00:02:30.860This could be any length,but I'm going to set it up00:02:30.860 --> 00:02:34.150so our beatis three measures long.00:02:34.150 --> 00:02:36.190We’ll need to playor makeBeat call within a loop00:02:36.190 --> 00:02:39.050in order to placea beat over multiple measures,00:02:39.050 --> 00:02:41.110so let's go ahead and do that.00:02:41.110 --> 00:02:46.050We'll say “for measure is equalto start measure.”00:02:46.050 --> 00:02:49.150“Measure is less thanendMeasure”—this will take us up00:02:49.150 --> 00:02:51.300to and measure.00:02:51.300 --> 00:02:55.770And “measure plus plus”to iterate by a single measure.00:02:55.770 --> 00:02:57.420We’ll place our makeBeat callwithin the loop00:02:57.420 --> 00:02:58.650using the sound clip00:02:58.650 --> 00:03:02.750we pass into the function,putting it on track 1,00:03:02.750 --> 00:03:05.820starting at the loop countermeasure,00:03:05.820 --> 00:03:09.200and using our beatString.00:03:09.200 --> 00:03:12.330Now it turns out that endMeasureis kind of a special variable00:03:12.330 --> 00:03:13.600in this case.00:03:13.600 --> 00:03:15.800If we want to chaintwo beats together,00:03:15.800 --> 00:03:17.960we need to knowwhere the first beat should end00:03:17.960 --> 00:03:20.110and where the second beatshould start.00:03:20.110 --> 00:03:23.090So this is the perfectopportunity to return endMeasure00:03:23.090 --> 00:03:25.910so it can be usedoutside the function.00:03:25.910 --> 00:03:29.660We'll come back to what's goingon here in just a second.00:03:29.660 --> 00:03:32.610So in order for our functionto execute, we need to call it.00:03:32.610 --> 00:03:35.690And to get two beats,we’ll need to call it twice.00:03:35.690 --> 00:03:38.150Let's start withthe first function call.00:03:38.150 --> 00:03:43.960We'll pass in a starting measureof 1, a hip hop clip00:03:43.960 --> 00:03:46.500and our first beatString.00:03:46.500 --> 00:03:48.610Now let's walk throughexactly what is happening00:03:48.610 --> 00:03:51.770within our functionto see what it outputs.00:03:51.770 --> 00:03:56.670With startMeasure equal to 1,endMeasure will equal 4.00:03:56.670 --> 00:04:00.650Our 4-loop will executea series of makeBeat calls.00:04:00.650 --> 00:04:01.990And then we output the value00:04:01.990 --> 00:04:05.060in endMeasureusing a return statement.00:04:05.060 --> 00:04:08.150And what the return statementis saying here is pass the value00:04:08.150 --> 00:04:11.660and endMeasure backto whatever called me.00:04:11.660 --> 00:04:14.500In this case, the valuein endMeasure is the number 4,00:04:14.500 --> 00:04:15.970and our function call right here00:04:15.970 --> 00:04:18.500is what we are passingthe number back to.00:04:18.500 --> 00:04:20.950So you can think of thisentire call being replaced00:04:20.950 --> 00:04:22.325with the number 4.00:04:22.325 --> 00:04:23.700But we can't just have a value00:04:23.700 --> 00:04:25.520hanging outin the middle of our script,00:04:25.520 --> 00:04:29.520so we should assign itto a variable so it can be used.00:04:30.530 --> 00:04:32.910We essentially just assignthe number 4,00:04:32.910 --> 00:04:34.510to the newStart variable.00:04:34.510 --> 00:04:36.110This gives us the ability00:04:36.110 --> 00:04:39.930to chain a second beatonto our first.00:04:39.930 --> 00:04:42.200Now we can takethe newStart variable00:04:42.200 --> 00:04:44.250and pass it inas the starting measure00:04:44.250 --> 00:04:47.120of a second createBeatfunction call.00:04:47.120 --> 00:04:49.820This function returnsit's ending measure as well but,00:04:49.820 --> 00:04:51.160since we don't need to use it,00:04:51.160 --> 00:04:53.320we can leavethis function call as is.00:04:53.320 --> 00:04:56.999Let's press Run to hearwhat we've created.00:05:00.589 --> 00:05:14.998[syncopated kick drum,bass drop]00:05:15.540 --> 00:05:16.890There's a couple other things00:05:16.890 --> 00:05:19.380I want to point outabout return statements.00:05:19.380 --> 00:05:21.870As you maybe guessed,a function does not need00:05:21.870 --> 00:05:24.450a returnstatement—It's optional.00:05:24.450 --> 00:05:26.050Functions withouta return statement00:05:26.050 --> 00:05:28.670simply do not returnor output value.00:05:28.670 --> 00:05:30.900So when deciding whether to usea return statement00:05:30.900 --> 00:05:32.990in your functions,ask yourself,00:05:32.990 --> 00:05:35.940“Is there any informationgenerated inside this function00:05:35.940 --> 00:05:37.450that I could use later on?”00:05:37.450 --> 00:05:38.960If you don't need to use00:05:38.960 --> 00:05:41.270any of that informationoutside the function,00:05:41.270 --> 00:05:43.250then you probably don't needa return statement.00:05:43.250 --> 00:05:44.510You should also know00:05:44.510 --> 00:05:46.980that if you chooseto use the return statement,00:05:46.980 --> 00:05:49.100your function will endonce the return statement00:05:49.100 --> 00:05:51.900is encountered—it's a signalto stop.00:05:51.900 --> 00:05:54.230So if you have any codeafter the return statement00:05:54.230 --> 00:05:57.130in your function body,it will be ignored.00:05:57.130 --> 00:06:00.250And with that, we've cometo the end of another video.00:06:00.250 --> 00:06:03.609Happy programmingand thanks for watching!00:06:04.379 --> 00:06:11.188[syncopated kick drum]