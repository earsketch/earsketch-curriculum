WEBVTT

00:00:01.635 --> 00:00:03.904 align:middle line:79% position:47% size:53%
Instructor: Let's use
what we've learned

00:00:03.904 --> 00:00:07.307 align:middle line:79% position:50% size:61%
about list concatenation
and list slicing,

00:00:07.307 --> 00:00:09.409 align:middle line:79% position:47% size:53%
along with makeBeat()
with lists,

00:00:09.409 --> 00:00:13.013 align:middle line:79% position:46% size:68%
to create a rhythm
that is constantly changing

00:00:13.013 --> 00:00:14.848 align:middle line:85% position:50% size:35%
as it repeats.

00:00:14.848 --> 00:00:17.885 align:middle line:79% position:50% size:50%
This script is going
to vary the rhythm

00:00:17.885 --> 00:00:21.655 align:middle line:79% position:44% size:78%
every four measures
by taking a list of drum sounds

00:00:21.655 --> 00:00:24.458 align:middle line:79% position:47% size:63%
and taking whatever sound
is at the end of the list

00:00:24.458 --> 00:00:26.760 align:middle line:79% position:50% size:75%
and moving it to the beginning
so that when we use

00:00:26.760 --> 00:00:29.162 align:middle line:79% position:50% size:61%
our beatString,
these numbers will start

00:00:29.162 --> 00:00:34.534 align:middle line:79% position:44% size:78%
referring to different sounds
and lists every fourth measure.

00:00:34.534 --> 00:00:35.936 align:middle line:79% position:50% size:50%
Let's look at this
in some more detail.

00:00:35.936 --> 00:00:38.438 align:middle line:79% position:50% size:70%
First let's look at how
the makeBeat() function here

00:00:38.438 --> 00:00:39.339 align:middle line:85% position:48% size:28%
is working.

00:00:39.339 --> 00:00:42.843 align:middle line:79% position:50% size:70%
We're placing—
we're inside of a "for" loop

00:00:42.843 --> 00:00:46.480 align:middle line:79% position:44% size:78%
that's going measure by measure
through a song.

00:00:46.480 --> 00:00:49.883 align:middle line:79% position:50% size:70%
And this makeBeat() function
is placing one measure

00:00:49.883 --> 00:00:53.120 align:middle line:79% position:50% size:61%
of a rhythm
onto track 1 of the DAW.

00:00:55.389 --> 00:00:58.025 align:middle line:79% position:50% size:81%
We've used as the first argument
not a single sound,

00:00:58.025 --> 00:01:02.195 align:middle line:79% position:50% size:70%
but this list of sounds here
so that in our beatString

00:01:02.195 --> 00:01:05.832 align:middle line:79% position:45% size:73%
all of these numbers
refer to indices of the list.

00:01:05.832 --> 00:01:12.472 align:middle line:79% position:50% size:65%
So the five here refers
to place 0, 1, 2, 3, 4, 5,

00:01:12.472 --> 00:01:13.473 align:middle line:85% position:50% size:45%
this last element.

00:01:13.473 --> 00:01:17.177 align:middle line:79% position:50% size:61%
And if we went to say
the one at the end here,

00:01:17.177 --> 00:01:20.280 align:middle line:79% position:50% size:41%
that would refer
to the 01 sound,

00:01:20.280 --> 00:01:22.816 align:middle line:85% position:50% size:41%
this sound here.

00:01:22.816 --> 00:01:26.420 align:middle line:79% position:50% size:70%
Now, in our for
loop, we're not just calling

00:01:26.420 --> 00:01:29.589 align:middle line:79% position:47% size:63%
makeBeat() every measure,
but we're also calling

00:01:29.589 --> 00:01:32.259 align:middle line:79% position:50% size:70%
this if-statement every time
we go through each measure,

00:01:32.259 --> 00:01:34.828 align:middle line:79% position:47% size:53%
saying
"if(measure % 4 = 0,"

00:01:34.828 --> 00:01:37.764 align:middle line:79% position:50% size:70%
and if that is true,
then we do some other things

00:01:37.764 --> 00:01:39.999 align:middle line:85% position:50% size:65%
to rotate the sounds list.

00:01:39.999 --> 00:01:41.468 align:middle line:79% position:47% size:58%
So let's look
at the expression here,

00:01:41.468 --> 00:01:44.738 align:middle line:79% position:44% size:78%
the Boolean expression
"measure mod four equals zero."

00:01:44.738 --> 00:01:49.309 align:middle line:79% position:44% size:78%
The mod is taking the remainder
of a division operation.

00:01:49.309 --> 00:01:53.313 align:middle line:79% position:47% size:63%
So when measure is 1,
we're looking at "1 % 4."

00:01:53.313 --> 00:01:56.350 align:middle line:79% position:50% size:45%
Well "1 % 4" is 1,
because it doesn't

00:01:56.350 --> 00:01:57.651 align:middle line:85% position:50% size:35%
divide evenly.

00:01:57.651 --> 00:01:59.453 align:middle line:79% position:47% size:63%
One doesn't divide evenly
into four,

00:01:59.453 --> 00:02:01.388 align:middle line:79% position:50% size:56%
so we're left
with a remainder of 1.

00:02:01.388 --> 00:02:03.123 align:middle line:85% position:50% size:56%
That's not equal to 0.

00:02:03.123 --> 00:02:05.926 align:middle line:79% position:50% size:61%
Next time we go through,
we get "2 % 4,"

00:02:05.926 --> 00:02:07.928 align:middle line:79% position:46% size:68%
but 2 doesn't divide evenly
into 4 either,

00:02:07.928 --> 00:02:10.831 align:middle line:85% position:46% size:68%
so we get 2 as a remainder.

00:02:10.831 --> 00:02:13.467 align:middle line:79% position:46% size:68%
"3 % 4."
Three doesn't divide evenly

00:02:13.467 --> 00:02:15.102 align:middle line:79% position:48% size:43%
into four either,
so we have three

00:02:15.102 --> 00:02:16.303 align:middle line:85% position:48% size:38%
as a remainder.

00:02:16.303 --> 00:02:19.473 align:middle line:79% position:48% size:43%
"4 % 4."
But 4 does divide

00:02:19.473 --> 00:02:21.208 align:middle line:79% position:47% size:53%
evenly into 4,
there's no remainder.

00:02:21.208 --> 00:02:22.709 align:middle line:85% position:48% size:43%
So that equals 0.

00:02:22.709 --> 00:02:24.711 align:middle line:79% position:50% size:50%
So this condition
is going to be true,

00:02:24.711 --> 00:02:27.247 align:middle line:79% position:50% size:65%
and that's the first time
we'll execute the contents

00:02:27.247 --> 00:02:29.716 align:middle line:85% position:50% size:65%
of the if-statement block.

00:02:29.716 --> 00:02:32.419 align:middle line:79% position:50% size:56%
And then "5 % 4"
would have a remainder

00:02:32.419 --> 00:02:35.255 align:middle line:85% position:50% size:56%
of 1 again, and so on.

00:02:35.255 --> 00:02:38.725 align:middle line:79% position:47% size:58%
When we get to "8 % 4,"
well 8 divided by 4

00:02:38.725 --> 00:02:41.828 align:middle line:79% position:50% size:75%
divides evenly,
so we get a remainder of zero.

00:02:41.828 --> 00:02:44.231 align:middle line:79% position:44% size:78%
And that would be
the next time it would be true,

00:02:44.231 --> 00:02:47.501 align:middle line:79% position:47% size:53%
and then again at 12,
then 16, then 20,

00:02:47.501 --> 00:02:50.437 align:middle line:85% position:47% size:58%
and so on and so forth.

00:02:50.437 --> 00:02:53.807 align:middle line:10% position:47% size:58%
So every four measures,
this block of code

00:02:53.807 --> 00:02:56.476 align:middle line:10% position:50% size:65%
inside of the if-statement
will execute.

00:02:56.476 --> 00:02:57.911 align:middle line:10% position:50% size:61%
Now let's look at what's
actually happening

00:02:57.911 --> 00:02:59.746 align:middle line:10% position:48% size:38%
inside of here.

00:02:59.746 --> 00:03:04.184 align:middle line:79% position:45% size:73%
First thing is we're defining
a variable called listLength.

00:03:04.184 --> 00:03:07.754 align:middle line:79% position:47% size:58%
It would be the length
of the drumSounds list,

00:03:07.754 --> 00:03:12.225 align:middle line:79% position:45% size:73%
which has one, two, three,
four, five, six sounds in it.

00:03:12.225 --> 00:03:14.194 align:middle line:85% position:50% size:65%
So listLength is always 6.

00:03:14.194 --> 00:03:17.297 align:middle line:79% position:50% size:70%
Now, we're defining
a new list called lastSound,

00:03:17.297 --> 00:03:21.101 align:middle line:79% position:47% size:58%
which equals drumSounds
of this length minus 1,

00:03:21.101 --> 00:03:26.873 align:middle line:79% position:50% size:61%
that's 6 minus 1, so 5,
to listLength, that's 6.

00:03:26.873 --> 00:03:31.978 align:middle line:85% position:50% size:81%
So we're going 0, 1, 2, 3, 4, 5.

00:03:31.978 --> 00:03:34.514 align:middle line:79% position:47% size:58%
We're just taking
this very last element.

00:03:34.514 --> 00:03:39.419 align:middle line:85% position:50% size:81%
In this case it is "OS_SNARE01."

00:03:39.419 --> 00:03:41.988 align:middle line:79% position:47% size:58%
The next statement here
is defining a new list

00:03:41.988 --> 00:03:49.096 align:middle line:79% position:46% size:68%
called allButLastSound,
and that is drumSounds of 0

00:03:49.096 --> 00:03:52.165 align:middle line:79% position:50% size:56%
all the way up
to listLength minus 1,

00:03:52.165 --> 00:03:54.835 align:middle line:85% position:47% size:63%
which is 6 minus 1, or 5.

00:03:54.835 --> 00:03:59.639 align:middle line:79% position:46% size:68%
So that's 0, 1, 2, 3, and 4
get included in that list.

00:03:59.639 --> 00:04:02.676 align:middle line:79% position:45% size:73%
So in other words,
that's everything in the list

00:04:02.676 --> 00:04:05.512 align:middle line:85% position:50% size:65%
except for the last sound.

00:04:08.715 --> 00:04:14.321 align:middle line:79% position:50% size:75%
So now, we reassign drumSounds
to be a new list,

00:04:14.321 --> 00:04:17.090 align:middle line:79% position:50% size:61%
which is
concatenating lastSound,

00:04:17.090 --> 00:04:23.830 align:middle line:79% position:47% size:63%
that's this one,
and all the other sounds.

00:04:23.830 --> 00:04:28.068 align:middle line:79% position:50% size:70%
So what we've done here
is we've taken "OS_SNARE01,"

00:04:28.068 --> 00:04:30.270 align:middle line:79% position:50% size:65%
which was the last element
in the list,

00:04:30.270 --> 00:04:32.372 align:middle line:79% position:50% size:81%
and we've moved it
to the first element in the list

00:04:32.372 --> 00:04:36.076 align:middle line:79% position:47% size:58%
through list slicing
and list concatenation.

00:04:36.076 --> 00:04:39.112 align:middle line:79% position:47% size:58%
So now, the next time
we use this beatString,

00:04:39.112 --> 00:04:42.449 align:middle line:79% position:45% size:73%
all the elements in this list
will be in different slots.

00:04:42.449 --> 00:04:44.618 align:middle line:79% position:45% size:73%
So we'll get the same rhythm,
but it will be realized

00:04:44.618 --> 00:04:47.320 align:middle line:79% position:47% size:63%
with different sounds,
because the five will now

00:04:47.320 --> 00:04:49.456 align:middle line:79% position:50% size:81%
be pointing to a different sound
than it was before.

00:04:49.456 --> 00:04:51.424 align:middle line:79% position:50% size:81%
All the numbers will be pointing
to different sounds

00:04:51.424 --> 00:04:52.993 align:middle line:85% position:50% size:56%
than they were before.

00:04:52.993 --> 00:04:55.595 align:middle line:79% position:44% size:78%
And so that continues happening
as we rotate these sounds

00:04:55.595 --> 00:04:57.731 align:middle line:79% position:48% size:48%
through the list
every four measures

00:04:57.731 --> 00:04:59.266 align:middle line:85% position:50% size:61%
until we get to the end.

00:04:59.266 --> 00:05:00.934 align:middle line:79% position:47% size:58%
So every four measures,
we get a variation

00:05:00.934 --> 00:05:03.370 align:middle line:85% position:50% size:41%
on the drumBeat.

00:05:03.370 --> 00:05:06.740 align:middle line:79% position:50% size:70%
This notion of repeating
and varying throughout music

00:05:06.740 --> 00:05:10.243 align:middle line:79% position:50% size:75%
realized through these various
computational techniques.

00:05:10.243 --> 00:06:14.007 align:middle line:85% position:47% size:63%
[upbeat electronic music]

