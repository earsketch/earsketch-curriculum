[[IntroductionToGM]]
== Introduction to GrooveMachine 
:nofooter:

Groove Machine is shaped like a turntable. It can be used to create musical loops that turn into EarSketch code.

Groove Machine has **three** types of controls:
	
. Shapes (left side) : Drop these shapes onto  the 8 different octants (sections) of Groove Machine. Blue shapes are sounds, and green, yellow, and orange shapes are effects. **When hovering over a shape on the left side of the page, make sure to pick one from the window that appears to its right.**
  .. Green shape - deepens sounds
  .. Yellow shape - creates an echo of the sound
  .. Orange shape - beat repeat

. Sample Pack Selector (bottom) : Select one of the four sample packs.
. Direction Change (bottom) : Use these buttons to set whether Groove Machine plays clockwise or counterclockwise. 

Once you are happy with the music you’ve made in Groove Machine, click the paste icon above the code to open the script in the EarSketch’s code editor. 

=== Use Groove Machine 
:nofooter:

++++
<div id="gmMachine">
<iframe id="frame" src="https://groovemachine.lmc.gatech.edu/codeframe" style="width:560px; height:900px;"> </iframe>
<script type="text/javascript" src="curriculum/scripts/groovemachine.js"></script>
</div>
++++


[[Overview]]
=== Overview
:nofooter:

As you work with Groove Machine, the code window below it updates based on the changes you make to the music. Once you are happy with the music you’ve made in Groove Machine, click the paste icon above the code to open the script in the EarSketch’s code editor. Take a look at the script to understand how it works and how you can change it to take the music further.

[role="curriculum-python"]
* Lines 7 and 9 : Specify the start and end measure for Groove Machine. You can change the start measure for your music here if you would prefer.
* Line 8 : Specifies the number of octants used. Each measure in the EarSketch DAW is made up of 2 octants. 
* Line 13 : This is where Groove Machine places the title of the sample pack you’ve selected from the drop down menu. 
* Line 14 : Specifies the direction chosen from the Direction Change buttons on the Groove Machine GUI. 

[role="curriculum-javascript"]
* Line 7 and 9 : Specify the start and end measure for Groove Machine. You can change the start measure for your music here if you would prefer.
* Lines 8 : Specifies the number of octants used. Each measure in the EarSketch DAW is made up of 2 octants. 
* Line  13 : This is where Groove Machine places the title of the sample pack you’ve selected from the drop down menu. 
* Line 14 : Specifies the direction chosen from the Direction Change buttons on the Groove Machine GUI. 


[role="curriculum-python"]
* Lines 18-21 : These lines hold multiples arrays to control samples and effects.
** Line 18 : Samples - Here you can decide which sample in your sample_pack to use based off of its number in the sample pack. You can also type None if you don’t want to use any of the samples.
** Line 19 : Lowpass Filter - ( deepens sounds): On this line use the terms True or False to decide if you want to use the lowpass filter or not.
** Line 20 : Reverb (Echo) - On this line use the terms True or False to decide if you want to use the reverb or not.
** Line 21 : Beat Repeat - On this line use the terms True or False to decide if you want to use beat repeat or not. 

[role="curriculum-javascript"]
* Lines 18-21 : These lines hold multiple arrays to control samples and effects.
** Line 18 : Samples - Here you can decide which sample in your sample_pack to use based off of its number in the sample pack. You can also type None if you don’t want to use any of the samples.
** Line 19 : Lowpass Filter(deepens sounds) - On this line use the terms True or False to decide if you want to use the lowpass filter or not.
** Line 20 : Reverb (Echo) - On this line use the terms True or False to decide if you want to use the reverb or not.
** Line 21 : Beat Repeat - On this line use the terms True or False to decide if you want to use beat repeat or not.

[role="curriculum-python"]
* Lines 24-51 : playForward function
** Clockwise direction of movement for the Groove Machine

[role="curriculum-javascript"]
* Lines 24-62 : playForward function
** Clockwise direction of movement for the Groove Machine


**Question**:
  What is used within this function to create repetition?

[role="curriculum-python"]
* Lines 54-82 : playReverse function
** Anti-clockwise direction of movement for the Groove Machine


[role="curriculum-javascript"]
* Lines 64-102 : playReverse function
** Anti-clockwise direction of movement for the Groove Machine


[role="curriculum-python"]
* Line 86-87 : addSample function
** This function uses the fitMedia function covered in unit 1 chapter 2 of the curriculum.

[role="curriculum-javascript"]
* Line 105-107 : addSample function
** This function uses the fitMedia function covered in unit 1 chapter 2 of the curriculum.

[role="curriculum-python"]
* Line 90-92 : addLowpass function
** This function deepens the sound of the music and filters out higher frequencies.

[role="curriculum-javascript"]
* Line 110-113: addLowpass function
** This function deepens the sound of the music and filters out higher frequencies.

[role="curriculum-python"]
* Lines 95-97 : addReverb function
** This function helps to create an echo of the music.

[role="curriculum-javascript"]
* Lines 116-119 : addReverb function
** This function helps to create an echo of the music.

[role="curriculum-python"]
* Lines 100-101 : addBeatRepeat function
** This function creates a rhythmic pattern in the measures of the music. 

[role="curriculum-javascript"]
* Lines 122-124 : addBeatRepeat function
** This function creates a rhythmic pattern in the measures of the music. 




==== Where to put additional code?
If you would like to add more to the music using any feature of EarSketch which was previously covered, create space for it between line 17 and the comment on line 18. This is a good spot for placing other setEffect options and fitMedia functions and will help your code to stay organized and clean.


[[UnderTheHood]]
=== Under the Hood
:nofooter:

Building blocks of  Groove Machine:

* Arrays or Lists :  To review this topic go to <<building-blocks#datatypes, 2.2: Data Types>>.

[role="curriculum-python"]
[source,python]
----
samples    =  [None,6,None,None,None,None,None,None]
lowpass    =  [False,False,False,False,False,False,False,False]
reverb     =  [False,False,False,False,False,False,False,False]
beatrepeat =  [False,True,False,False,False,False,False,False]
----


[role="curriculum-javascript"]
[source,javascript]
----
var samples     = [null,null,null,null,null,null,null,4]
var lowpass     = [false,false,false,false,false,false,false,false]
var reverb      = [false,false,false,false,false,false,false,true]
var beatrepeat  = [false,false,false,false,false,false,false,false]
----


Iterations : for-loop to iterate through the arrays. To review this topic go to <<looping#theforloop, 12.1: The For-Loop>>.
	
[role="curriculum-python"]
[source,python]
----
for o in range(0,8):
    # compute start measure of each octant
    measure = start + o * 0.5
    # add sample on to EarSketch timeline
    if samples[o]:
      if beatrepeat[o]:
        addBeatRepeat(samples[o],measure)
      else:
        addSample(samples[o], measure)

    if lowpass[o]:
      if samples[o]:
        addLowPass(measure)
      else:
        print "No audio sample, but lowpass modifier exists on octant {} ".format(o)
        setEffect(1, FILTER, MIX, 1, measure, 1, measure+0.5)
    else:
      setEffect(1, FILTER, MIX, 0, measure, 0, measure+0.5)

    if reverb[o]:
      if samples[o]:
        addReverb(measure)
      else:
        print "No audio sample, but reverb modifier exists on octant {} ".format(o)
        setEffect(1, REVERB, MIX, 1, measure, 1, measure+0.5)
    else:
      setEffect(1, REVERB, MIX, 0, measure, 0, measure+0.5)
----

[role="curriculum-javascript"]
[source,javascript]
----
for (var o=0; o < 8; o++) {
    // compute start measure of each octant
    var measure = start + o * 0.5;
    // add sample on to EarSketch timeline
    if (samples[o]) {
      if (beatrepeat[o])
        addBeatRepeat(samples[o],measure);
      else
        addSample(samples[o], measure);
    }
      
    if (lowpass[o]) {
      if (samples[o]) {
        addLowPass(measure);
      }  
      else {
        println("No audio sample, but lowpass modifier exists on octant " + o);
        setEffect(1, FILTER, MIX, 1, measure, 1, measure+0.5);
      }  
    }
    else {
      setEffect(1, FILTER, MIX, 0, measure, 0, measure+0.5);
    }

    if (reverb[o]) {
      if (samples[o]) {
        addReverb(measure)
      }
      else {
        println("No audio sample, but reverb modifier exists on octant " + o);
        setEffect(1, REVERB, MIX, 1, measure, 1, measure+0.5);
      }  
    }
    else {
      setEffect(1, REVERB, MIX, 0, measure, 0, measure+0.5)
    }
  }
----


Abstraction : Abstractions are a bundling of ideas to form a single concept. Functions are an example of this. For further information go to <<ch_u2_intro#,Unit 2: Abstraction>>

Ex. addSample custom function

[role="curriculum-python"]
[source,python]
----
def addSample(sample, measure):
  fitMedia(sample_pack + str(sample), 1, measure, measure+0.5)
----


[role="curriculum-javascript"]
[source,javascript]
----
function addSample(sample, measure) {
    fitMedia(sample_pack + sample, 1, measure, measure+0.5);
}
----

**Question**:
  There are many abstractions in the Groove Machine code. Can you name another section that uses abstraction?

==== Example of Abstraction in the code
With Groove Machine, the **fitMedia** function is used in the custom function addSample.  The parameters of the addSample function include sample and measure. These parameters hold the arguments that are being passed to the fitMedia function within the body. 

**Question**:
  Do you remember what the parameters are for fitMedia?


* The function addSample takes care of putting samples in chronological order. It also helps to reduce complexity and makes code easily understandable ( refer to <<musical-form-and-custom-functions#customfunctions,9.3: Custom Functions>> for further information about custom functions).

.addSample::
. The **first parameter** for fitMedia in the custom function addSample, sample_pack + str(sample), means  the sample_pack that was selected above and the particular number of samples within this sample_pack as defined in the sample variable above.
. The **second parameter** for fitMedia in the custom function addSample is the track number.
. The **third parameter** for fitMedia in the custom function addSample is the variable "measure". Take a moment and review what is in this variable. 
. The **fourth parameter** for fitMedia in the custom function addSample is the variable "measure" plus +0.5. This specifies where the sample will end. 

[[AdvancedTopics]]
=== Advanced Topics and Exercises
:nofooter:

* Line 8 : On this line of the code, you can determine how many octants you would like to have for your music. 

[role="curriculum-python"]
**Note: If you change the amount of octants make sure that the variables on lines 18-21 have the same amount of values in the arrays. Also make sure to change the range for lines 25 and 55.**

[role="curriculum-javascript"]
**Note: If you change the amount of octants make sure that the variables on lines 18-21 have the same amount of values in the arrays. Also make sure to change the range for lines 25 and 65.**

* Line 13 : This is where you need to put the title of the sample pack that you want to use. When you specifically want to select a group of samples from the EarSketch sound browser to use in the Groove Machine code, make sure to include everything in the name except for the ending number. **Some sample packs will have 0’s before their ending numbers but others may not.**


Ex. Sample pack with the two samples
----
HIPHOP_DUSTYMOOG_001
HIPHOP_DUSTYMOOG_002
----

Remove the last number and place it into the sample_pack variable like this:
----
sample_pack = 'HIPHOP_DUSTYMOOG_00'
----

* Line 14 : This line determines the direction of the Groove Machine and whether it will move forward or backwards. In order for the direction to be forward (or clockwise), forward must equal true ( forward= true), if you would like the direction to be backwards ( or counterclockwise) change this to False (forward=False).

==== Activities

. With the sample code that you are using, insert the name of another sample pack you want to use.
. If you want to use a sample pack that you have created outside of EarSketch, make sure the files start the same name and are numbered in chronological order, upload the files to the EarSketch website, and type the main title of the sample pack into the sample_pack variable.
. With addBeatRepeat, change up the  string that is one of the parameters of makeBeat. Create different rhythmic ideas with this string. Review creating beats with strings in <<making-custom-beats#beatpatternswithstrings,11.2: Beat Patterns With Strings>> of the curriculum.




